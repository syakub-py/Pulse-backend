# Pulse Backend 🏘️ API

## Overview

The backend for Pulse, a property management application, built with FastAPI to provide API services for landlord and tenant interactions.

## 🌟 Features

- **RESTful API Design**
  - Comprehensive endpoints for tenant management
  - Secure rent tracking and payment processing
  - Maintenance request handling
  - User authentication and authorization

- **Database Interactions**
  - SQLAlchemy ORM integration
  - Efficient database queries
  - Data validation and serialization

- **Security**
  - JWT token-based authentication
  - Password hashing
  - Role-based access control

## 🛠 Technology Stack

- **Backend Framework**: FastAPI
- **Language**: Python 3.9+
- **ORM**: SQLAlchemy
- **Database**: PostgreSQL
- **Validation**: Pydantic

## 📱 Prerequisites

- Python 3.9 or later
- PostgreSQL 12+
- pip or poetry
- Virtual environment recommended

## 🚀 Installation

1. Clone the repository
```bash
git clone https://github.com/yourusername/pulse-backend.git
cd pulse-backend
```

2. Create and activate a virtual environment
```bash
python -m venv venv
source venv/bin/activate  # On Windows use `venv\Scripts\activate`
```

3. Install dependencies
```bash
pip install -r requirements.txt
# Or if using poetry
poetry install
```

4. Set up environment variables
```bash
# Create a .env file with the following
DATABASE_URL=postgresql://user:password@localhost/pulsedb
SECRET_KEY=your_secret_key
```

5. Run database migrations
```bash
alembic upgrade head
```

## 🚦 Running the Application

```bash
# Development server
uvicorn app.main:app --reload

# Production deployment
gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker
```

## 🧪 Testing

- **Framework**: pytest
- **Coverage**: Coverage.py

Run tests with:
```bash
pytest
# With coverage
pytest --cov=app
```

## 📡 API Documentation

- Swagger UI: `/docs`
- ReDoc: `/redoc`

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## 📄 Database Migrations

Using Alembic for database schema management:

```bash
# Create a new migration
alembic revision --autogenerate -m "Description of changes"

# Apply migrations
alembic upgrade head
```

## 🔐 Environment Configuration

Supported environment variables:
- `DATABASE_URL`: PostgreSQL connection string
- `SECRET_KEY`: JWT secret key
- `DEBUG`: Enable/disable debug mode
- `CORS_ORIGINS`: Allowed CORS origins

---

## 🔮 Future Roadmap

- [ ] Implement WebSocket support for real-time notifications
- [ ] Add comprehensive logging
- [ ] Develop more advanced reporting endpoints
- [ ] Implement rate limiting
- [ ] Add comprehensive monitoring and metrics
```

## 📊 Performance Considerations

- Async database operations
- Connection pooling
- Efficient query optimization
- Caching strategies

Default rate limits:
- Authentication endpoints: 5 requests/minute
- API endpoints: 100 requests/minute per user
